<!--
    작성자: 윤정도
    생성일: 2/27/2023
-->

<Window x:Class="SGToolsUI.View.MainView"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        
        xmlns:i="clr-namespace:Microsoft.Xaml.Behaviors;assembly=Microsoft.Xaml.Behaviors"
        xmlns:acb="clr-namespace:AttachedCommandBehavior;assembly=AttachedCommandBehavior"
        xmlns:sys="clr-namespace:System;assembly=System.Runtime"
        xmlns:c="http://schemas.xceed.com/wpf/xaml/toolkit"


        xmlns:local="clr-namespace:SGToolsUI"
        xmlns:vm="clr-namespace:SGToolsUI.ViewModel"
        xmlns:model="clr-namespace:SGToolsUI.Model"
        xmlns:cus_ui_ctrl="clr-namespace:SGToolsUI.CustomControl"
        xmlns:ui_selector="clr-namespace:SGToolsUI.ModelSelector"

        xmlns:cv="clr-namespace:SGToolsCommon.Converter;assembly=SGToolsCommon"
        xmlns:sga="clr-namespace:SGToolsCommon.Sga;assembly=SGToolsCommon"
        xmlns:cus_common_ctrl="clr-namespace:SGToolsCommon.CustomControl;assembly=SGToolsCommon"
        xmlns:cus_common_style="clr-namespace:SGToolsCommon.CustomStyle;assembly=SGToolsCommon"
        Name="View"
        FontSize="14"
        AllowsTransparency="True" WindowStyle="None"
        SizeToContent="WidthAndHeight"
        Closing="MainView_OnClosing"

        PreviewKeyDown="MainView_OnKeyDown"
        PreviewKeyUp="MainView_OnKeyUp"
        Loaded="MainView_OnLoaded"
        Style="{StaticResource OneLineWindow}"
        DataContext="{Binding RelativeSource={RelativeSource Self}}">
    
    <DockPanel Name="MainDockPanel"
               DataContext="{Binding Path=ViewModel}">
        <i:Interaction.Triggers>
            <i:EventTrigger EventName="MouseMove">
                <i:InvokeCommandAction Command="{Binding Commander.MouseMoveOnWindow}"
                                       PassEventArgsToCommand="True" />
            </i:EventTrigger>
            <i:EventTrigger EventName="MouseWheel">
                <i:InvokeCommandAction Command="{Binding Commander.CanvasWheel}"
                                       PassEventArgsToCommand="True" />
            </i:EventTrigger>
        </i:Interaction.Triggers>

        <!-- ###############################################################################
        
                                                타이틀바
        
            ############################################################################### -->

        <cus_common_ctrl:TitleBar Name="TitlePanel" Title="슈타인즈게이트 : UI 툴" DockPanel.Dock="Top"/>
        <Separator DockPanel.Dock="Top"/>


        <!-- ###############################################################################
        
                                              상태 표시줄
        
            ############################################################################### -->
        <Grid DockPanel.Dock="Bottom" >
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="{Binding Source={x:Static local:Constant.LeftPaneWidth}}"/>
                <ColumnDefinition Width="1"></ColumnDefinition>
                <ColumnDefinition Width="{Binding ZoomState.BaseCanvasStatusBarWidth, Mode=OneWay}"/>
                <ColumnDefinition Width="1"></ColumnDefinition>
                <ColumnDefinition Width="*"></ColumnDefinition>
            </Grid.ColumnDefinitions>
            <Grid Grid.Column="0">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*"></ColumnDefinition>
                    <ColumnDefinition Width="*"></ColumnDefinition>
                    <ColumnDefinition Width="*"></ColumnDefinition>
                </Grid.ColumnDefinitions>
                <TextBox Grid.Column="0" Text="{Binding MouseOnMonitor, Converter={cv:VectorStringConverter}}" Style="{StaticResource ReadonlyTextBox}"/>
                <TextBox Grid.Column="1" Text="{Binding MouseOnWindow, Converter={cv:VectorStringConverter}}" Style="{StaticResource ReadonlyTextBox}"/>
                <TextBox Grid.Column="2" Text="{Binding MouseOnCanvas, Converter={cv:VectorStringConverter}}" Style="{StaticResource ReadonlyTextBox}"/>
            </Grid>
            <Border     Grid.Column="1"  Style="{StaticResource BorderSeparatorVertical}"/>
            <Grid Grid.Column="2" >
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="50"/>
                    <ColumnDefinition Width="*" />
                </Grid.ColumnDefinitions>
                <TextBox Grid.Column="0"  Text="{Binding ZoomState.ZoomLevelXString, Mode=OneWay}"  Margin="5, 0, 0, 0" Style="{StaticResource ReadonlyTextBox}"/>
                <TextBox Grid.Column="1"  Text="{Binding CanvasSelectionStatus}" Style="{StaticResource ReadonlyTextBox}"/>
            </Grid>
            <Border     Grid.Column="3"  Style="{StaticResource BorderSeparatorVertical}" />
            <TextBox    Grid.Column="4"  Text="{Binding ResourceSelectionStatus}" Margin="5, 0, 0, 0" Style="{StaticResource ReadonlyTextBox}"/>
        </Grid>
        <Separator DockPanel.Dock="Bottom" />

        <!-- ###############################################################################
        
                                              상단 메뉴
        
            ############################################################################### -->
        <Menu DockPanel.Dock="Top">
            <MenuItem Header="파일">
                <MenuItem Header="열기"/>
                <MenuItem Header="저장" />
            </MenuItem>
            <MenuItem Style="{StaticResource MenuItemSeparator}"/>
            <MenuItem Header="도구">
                <MenuItem Header="설정" Command="{Binding Commander.OpenSetting}" />
            </MenuItem>
            <MenuItem Style="{StaticResource MenuItemSeparator}"/>
        </Menu>
        <Separator DockPanel.Dock="Top"/>

 

        <!-- ###############################################################################
        
                                              트리뷰
        
            ############################################################################### -->

        <ScrollViewer Name="UIElementTreeViewScrollViewer" Height="Auto" Width="{Binding Source={x:Static local:Constant.LeftPaneWidth}}" VerticalScrollBarVisibility="Auto">
            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="*" />
                </Grid.RowDefinitions>
                <StackPanel Grid.Row="0">
                     <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="30"/>
                            <ColumnDefinition Width="30" />
                            <ColumnDefinition Width="30" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>

                        <Button Name="AddGroupUIElementButton" Grid.Column="0" Command="{Binding Commander.CreateUIElement}" CommandParameter="{x:Static model:SGUIElementType.Group}" Style="{StaticResource ImageButton}" cus_common_style:ImageButtonProperty.Image="/SGToolsUI;component/Resource/Icon/ui_group.ico"/>
                        <Button Name="AddButtonUIElementButton" Grid.Column="1" Command="{Binding Commander.CreateUIElement}" CommandParameter="{x:Static model:SGUIElementType.Button}" Style="{StaticResource ImageButton}" cus_common_style:ImageButtonProperty.Image="/SGToolsUI;component/Resource/Icon/ui_button.ico"/>
                        <Button Name="DeleteUIElementButton" Grid.Column="2" Command="{Binding Commander.DeleteUIElement}" Style="{StaticResource ImageButton}" cus_common_style:ImageButtonProperty.Image="/SGToolsCommon;component/Resource/Icon/common_delete.ico"/>
                    </Grid>
                    <Separator />
                </StackPanel>

                <cus_ui_ctrl:UIElementTreeView Grid.Row="1"
                                               x:Name="UIElementTreeView"
                                               Background="Transparent"
                                               BorderThickness="0"
                                               ItemTemplateSelector="{x:Static ui_selector:UIElementTreeViewSelector.Selector}"
                                               ItemsSource="{Binding GroupMaster.Children}">
                    <TreeView.ItemContainerStyle>
                        <Style TargetType="TreeViewItem"
                               BasedOn="{StaticResource {x:Type TreeViewItem}}">
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding Selected}" Value="True">
                                    <Setter Property="Background" Value="CornflowerBlue" />
                                </DataTrigger>
                                <DataTrigger Binding="{Binding Selected}" Value="False">
                                    <Setter Property="Background" Value="Transparent" />
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </TreeView.ItemContainerStyle>

                    <TreeView.Style>
                        <Style TargetType="{x:Type TreeView}">
                            <Style.Triggers>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding GroupMaster.HasSelectedElement}" Value="True" />
                                        <Condition Binding="{Binding GroupMaster.SelectedElement.IsGroup}" Value="True" />
                                    </MultiDataTrigger.Conditions>
                                    <Setter Property="ContextMenu">
                                        <Setter.Value>
                                            <ContextMenu>
                                                <MenuItem Style="{StaticResource MenuItemDelete}" Header="삭제" Command="{Binding Commander.DeleteUIElement}" />
                                                <MenuItem Style="{StaticResource MenuItemSelect}" Header="픽" Command="{Binding Commander.PickUIElement}" />
                                                <Separator />
                                                <MenuItem Style="{StaticResource MenuItemGroup}" Header="그룹 추가" Command="{Binding Commander.CreateUIElement}" CommandParameter="Group" />
                                                <MenuItem Style="{StaticResource MenuItemButton}" Header="버튼 추가" Command="{Binding Commander.CreateUIElement}" CommandParameter="Button" />
                                            </ContextMenu>
                                        </Setter.Value>
                                    </Setter>
                                </MultiDataTrigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding GroupMaster.HasSelectedElement}" Value="True" />
                                        <Condition Binding="{Binding GroupMaster.SelectedElement.IsGroup}" Value="False" />
                                    </MultiDataTrigger.Conditions>
                                    <Setter Property="ContextMenu">
                                        <Setter.Value>
                                            <ContextMenu>
                                                <MenuItem Style="{StaticResource MenuItemDelete}" Header="삭제" Command="{Binding Commander.DeleteUIElement}" />
                                                <MenuItem Style="{StaticResource MenuItemSelect}" Header="픽" Command="{Binding Commander.PickUIElement}" />
                                            </ContextMenu>
                                        </Setter.Value>
                                    </Setter>
                                </MultiDataTrigger>
                                <DataTrigger Binding="{Binding GroupMaster.HasSelectedElement}" Value="False">
                                    <Setter Property="ContextMenu">
                                        <Setter.Value>
                                            <ContextMenu>
                                                <MenuItem Style="{StaticResource MenuItemDelete}" Header="삭제" Command="{Binding Commander.DeleteUIElement}" IsEnabled="False" />
                                                <MenuItem Style="{StaticResource MenuItemSelect}" Header="픽" Command="{Binding Commander.PickUIElement}" IsEnabled="False" />
                                                <Separator />
                                                <MenuItem Style="{StaticResource MenuItemGroup}" Header="그룹 추가" Command="{Binding Commander.CreateUIElement}" CommandParameter="Group" IsEnabled="True" />
                                                <MenuItem Style="{StaticResource MenuItemButton}" Header="버튼 추가" Command="{Binding Commander.CreateUIElement}" CommandParameter="Button" IsEnabled="False" />
                                            </ContextMenu>
                                        </Setter.Value>
                                    </Setter>
                                </DataTrigger>
                                <DataTrigger Binding="{Binding GroupMaster.IsMultiSelected}" Value="True">
                                    <Setter Property="ContextMenu">
                                        <Setter.Value>
                                            <ContextMenu>
                                                <MenuItem Style="{StaticResource MenuItemDelete}" Header="삭제" Command="{Binding Commander.DeleteUIElement}" IsEnabled="True" />
                                            </ContextMenu>
                                        </Setter.Value>
                                    </Setter>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </TreeView.Style>
                </cus_ui_ctrl:UIElementTreeView>
            </Grid>
        </ScrollViewer>
        <Border Style="{StaticResource BorderSeparatorVertical}" DockPanel.Dock="Left"/>

        

        <StackPanel DockPanel.Dock="Left" Name="CanvasPanel">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="30"/>
                    <ColumnDefinition Width="30" />
                    <ColumnDefinition Width="30" />
                    <ColumnDefinition Width="*" />
                </Grid.ColumnDefinitions>

                <Button Name="ToggleCanvasGridButton" Grid.Column="0" Command="{Binding Commander.ToggleCanvasGrid}" Style="{StaticResource ImageButton}" cus_common_style:ImageButtonProperty.Image="/SGToolsCommon;component/Resource/Icon/common_grid.ico"/>
                <Button Name="ToggleCanvasViewportButton" Grid.Column="1" Command="{Binding Commander.ToggleCanvasViewport}" Style="{StaticResource ImageButton}" cus_common_style:ImageButtonProperty.Image="/SGToolsCommon;component/Resource/Icon/common_rect.ico"/>
            </Grid>
            <Grid>

                <!-- ###############################################################################
        
                                              엘리먼트 캔버스
        
                ############################################################################### -->
                <cus_ui_ctrl:UIElementItemsControl x:Name="UIElementsControl"
                                               ItemsSource="{Binding UIElements, RelativeSource={RelativeSource Self}}"
                                               ItemTemplateSelector="{x:Static ui_selector:UIElementCanvasSelector.Selector}">

                    <!-- 아이템을 어떤 패널에 표시할지 결정 -->
                    <ItemsControl.ItemsPanel>
                        <ItemsPanelTemplate>
                            <Canvas x:Name="UIElementsPanel"
                                    Width="{x:Static local:Constant.CanvasWidth}"
                                    Height="{x:Static local:Constant.CanvasHeight}"
                                    Background="LightGray">
                                <Canvas.LayoutTransform>
                                    <ScaleTransform ScaleX="{Binding ZoomState.ZoomLevelX, Mode=OneWay}"
                                                    ScaleY="{Binding ZoomState.ZoomLevelY, Mode=OneWay}" />
                                </Canvas.LayoutTransform>
                            </Canvas>
                        </ItemsPanelTemplate>
                    </ItemsControl.ItemsPanel>
                    <ItemsControl.ItemContainerStyle>
                        <Style TargetType="ContentPresenter">
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding CanvasElementType}" Value="UIElement">
                                    <Setter Property="Canvas.Left" Value="{Binding VisualPosition.X}"/>
                                    <Setter Property="Canvas.Top" Value="{Binding VisualPosition.Y}"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </ItemsControl.ItemContainerStyle>
                </cus_ui_ctrl:UIElementItemsControl>


                <!-- ###############################################################################
        
                                              쉐이프 캔버스
        
                ############################################################################### -->


                <cus_ui_ctrl:CanvasShapeItemsControl x:Name="CanvasShapesControl"
                                           ItemsSource="{Binding CanvasShapes, RelativeSource={RelativeSource Self}}"
                                           ItemTemplateSelector="{x:Static ui_selector:CanvasShapeSelector.Selector}">

                    <ItemsControl.ItemsPanel>
                        <ItemsPanelTemplate>
                            <Canvas x:Name="CanvasShapesPanel"
                                    Width="{x:Static local:Constant.CanvasWidth}"
                                    Height="{x:Static local:Constant.CanvasHeight}"
                                    Background="LightGray">
                                <Canvas.LayoutTransform>
                                    <ScaleTransform ScaleX="{Binding ZoomState.ZoomLevelX, Mode=OneWay}"
                                                    ScaleY="{Binding ZoomState.ZoomLevelY, Mode=OneWay}" />
                                </Canvas.LayoutTransform>
                            </Canvas>
                        </ItemsPanelTemplate>
                    </ItemsControl.ItemsPanel>
                </cus_ui_ctrl:CanvasShapeItemsControl>
            </Grid>
        </StackPanel>




        <Grid DockPanel.Dock="Left">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"></RowDefinition>
                <RowDefinition Height="*"></RowDefinition>
                <RowDefinition Height="*"></RowDefinition>
            </Grid.RowDefinitions>

            <Grid Grid.Row="0">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="30"></ColumnDefinition>
                    <ColumnDefinition Width="30"></ColumnDefinition>
                    <ColumnDefinition Width="30"></ColumnDefinition>
                    <ColumnDefinition Width="*"></ColumnDefinition>
                </Grid.ColumnDefinitions>
                <Button Grid.Column="0" Command="{Binding Commander.ReloadSgaPackage}" Style="{StaticResource ImageButton}" cus_common_style:ImageButtonProperty.Image="/SGToolsCommon;component/Resource/Icon/common_refresh.ico"/>
            </Grid>
            
            <StackPanel Grid.Row="1"
                        Orientation="Horizontal">
                <ListBox MinWidth="100"
                         MaxWidth="100"
                         Name="PackageListBox"
                         ScrollViewer.VerticalScrollBarVisibility="Hidden"
                         Style="{StaticResource StretchListBox}"
                         ItemsSource="{Binding PackManager.Packages}">
                    <ListBox.ItemTemplate>
                        <DataTemplate DataType="{x:Type sga:SgaPackage}">

                            <TextBlock Text="{
                            Binding FileNameWithoutExt, 
                            Converter={cv:SgaFileNameConverter}, 
                            ConverterParameter={x:Static sga:SgaPackageType.Interface}}">
                                <!-- 리스트박스 아이템 더블클릭으로 커맨드를 실행하기 위함 -->
                                <TextBlock.InputBindings>
                                    <MouseBinding MouseAction="LeftDoubleClick"
                                                  Command="{Binding DataContext.Commander.SelectSgaPackage, RelativeSource={RelativeSource AncestorType={x:Type ListBox}}}"
                                                  CommandParameter="{Binding}" />
                                </TextBlock.InputBindings>
                            </TextBlock>
                        </DataTemplate>
                    </ListBox.ItemTemplate>
                </ListBox>
                <ListBox MinWidth="150"
                         MaxWidth="150"
                         Name="ElementListBox"
                         ScrollViewer.VerticalScrollBarVisibility="Hidden"
                         Style="{StaticResource StretchListBox}"
                         ItemsSource="{Binding SelectedPackage.ElementHeaderList}">
                    <ListBox.ItemTemplate>
                        <DataTemplate DataType="{x:Type sga:SgaElementHeader}">
                            <TextBlock Text="{Binding Name}">
                                <!-- 리스트박스 아이템 더블클릭으로 커맨드를 실행하기 위함 -->
                                <TextBlock.InputBindings>
                                    <MouseBinding MouseAction="LeftDoubleClick"
                                                  Command="{Binding DataContext.Commander.SelectSgaElement, RelativeSource={RelativeSource AncestorType={x:Type ListBox}}}"
                                                  CommandParameter="{Binding}" />
                                </TextBlock.InputBindings>
                                <TextBlock.ContextMenu>
                                    <ContextMenu>
                                        <MenuItem Header="안녕"></MenuItem>
                                    </ContextMenu>
                                </TextBlock.ContextMenu>
                            </TextBlock>
                        </DataTemplate>
                    </ListBox.ItemTemplate>

                </ListBox>
                <cus_common_ctrl:PlaceholderImageListBox MinWidth="100"
                                             MaxWidth="100"
                                             Name="SpriteListBox"
                                             ScrollViewer.VerticalScrollBarVisibility="Hidden"
                                             PlaceholderImageSource="/SGToolsCommon;component/Resource/Icon/common_music.ico"
                                             PlaceholderImageSourceWidth="30"
                                             PlaceholderImageSourceHeight="30"
                                             PlaceholderImageSourceOpacity="0.5"
                                             Style="{StaticResource StretchListBox}"
                                             ItemsSource="{Binding SelectedImage.SpriteList}">
                    <cus_common_ctrl:PlaceholderImageListBox.ItemTemplate>
                        <DataTemplate>
                            <TextBlock Text="{Binding FrameIndex}">
                                <i:Interaction.Triggers>
                                    <!--리스트 박스 이벤트를 커맨드로 실행하기 위함-->
                                    <i:EventTrigger EventName="MouseEnter">
                                        <i:InvokeCommandAction Command="{Binding DataContext.Commander.SpritePreview, RelativeSource={RelativeSource AncestorType={x:Type ListBox}}}"
                                                               PassEventArgsToCommand="True" />
                                    </i:EventTrigger>
                                    <i:EventTrigger EventName="MouseLeave">
                                        <i:InvokeCommandAction Command="{Binding DataContext.Commander.SpritePreview, RelativeSource={RelativeSource AncestorType={x:Type ListBox}}}"
                                                               PassEventArgsToCommand="True" />
                                    </i:EventTrigger>
                                    <i:EventTrigger EventName="MouseLeftButtonDown">
                                        <i:InvokeCommandAction Command="{Binding DataContext.Commander.SelectSgaSprite, RelativeSource={RelativeSource AncestorType={x:Type ListBox}}}"
                                                               PassEventArgsToCommand="True" />
                                    </i:EventTrigger>
                                </i:Interaction.Triggers>
                            </TextBlock>
                        </DataTemplate>
                    </cus_common_ctrl:PlaceholderImageListBox.ItemTemplate>
                </cus_common_ctrl:PlaceholderImageListBox>
            </StackPanel>

            <Grid Grid.Row="2">
                <c:PropertyGrid Name="ElementPropertyGrid"/>
            </Grid>
        </Grid>

        
    </DockPanel>
</Window>