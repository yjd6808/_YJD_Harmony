@startuml
'https://plantuml.com/sequence-diagram

hide empty methods
hide empty fields


abstract Iterator<<반복자>> {
    VoidWatcher
    --
    Collection의 VoidOwner가 소유하고 있는 포인터를
    감시하는 VoidWatcher이다.

    VoidOwner가 소멸될 경우 제어블록을 통해 이를 감지할 수 있다.
    그래서 생성된 반복자가 유효한지 판단할 수 있게된다.
    IsValid() 함수가 이를 확인하는 함수이다.
    --
    virtual bool IsValid()

    virtual bool HasNext()
    virtual bool HasPrevious()

    virtual T& Previous()
    virtual T& Next()
    --
    가장 최상위 반복자 인터페이스
}



interface Iterable <<반복가능한>> {
    virtual Enumerator<T> Begin() const = 0
    virtual Enumerator<T> End() const = 0
    --
    가장 최상위 컨테이너 인터페이스
}


abstract class Collection <<컨테이너>> extends Iterable {
    VoidOwner

    해당 컨테이너 포인터의 주인을 설정한다.
    --
    IsEmpty()
    Size()
    --
    선형 컨테이너와 비선형 컨테이너의 인터페이스
}

note right of ListIterator
    그리지만 않을 뿐이지
    리스트도 배열과 마찬가지로
    
    ListQueueIterator
    ListStackIterator
    LinkedListIterator
    
    각각 구현한다.
end note

abstract class ListCollection extends Collection {
    헤드 더미 양방향 연결리스트로 구현
    --
    연결리스트 기반 선형 컨테이너의 인터페이스
}


class ListStack extends ListCollection
class ListQueue extends ListCollection
class LinkedList extends ListCollection

abstract class ArrayCollection extends Collection {
    Clear()
    IsFull()
    --
    배열기반 선형 컨테이너의 인터페이스
}

abstract class MapCollection {}

note bottom of MapCollection
    MapCollection도 다른 마찬가지로
    MapCollectionIterator을 가지고 있고

    HashMap은 HashMapIterator
    TreeMap은 TreeMapIterator를 반복자로 가진다.
end note

rectangle 배열의_이터레이터 {
    abstract class ArrayCollectionIterator {
        배열 기반 컨테이너 이터레이터의 인터페이스
    }
    class ArrayQueueIterator
    class ArrayStackIterator
    class VectorIterator

    circle 설명
    note top of 설명

    각 반복자들은 컨테이너의 포인터 정보를 멤버변수로 가지고 있고
    이를 캐스팅하여 사용한다.


    end note
}

 class ListIterator

class ArrayStack {
    Push()
    Pop()
    Top()
}

class ArrayQueue {
    Enqueue()
    Dequeue()
    Front()
}

class Vector {
    PushBack()
    PushBackAll()
    Insert()
    InsertAll()
    Remove()
    RemoveAt()
    Find()
    FindBinary()
    Offset()
    OffsetBinary()
    EmplaceBack()
    EmplaceInsert()
}



Iterable -u-> Iterator
ListCollection -l-> ListIterator
ListIterator -u-|> Iterator
ArrayCollectionIterator -u-|> Iterator
MapCollection -u-|> Collection



VectorIterator -u-|> ArrayCollectionIterator
ArrayStackIterator -u-|> ArrayCollectionIterator
ArrayQueueIterator -u-|> ArrayCollectionIterator

Vector -r-|> ArrayCollection
ArrayStack -r-|> ArrayCollection
ArrayQueue -r-|> ArrayCollection

ArrayStack ..> ArrayStackIterator
ArrayQueue ..> ArrayQueueIterator
Vector ..> VectorIterator

HashMap -u-|> MapCollection
TreeMap -u-|> MapCollection



ArrayStackIterator --> ArrayStack
ArrayQueueIterator --> ArrayQueue
VectorIterator --> Vector



   

' 노드간 포지션을 잡기를 위한 연결 '
Collection -[hidden]r-> ListIterator         
Collection -[hidden]l-> ArrayCollectionIterator
ArrayCollection -[hidden]r-> MapCollection


@enduml