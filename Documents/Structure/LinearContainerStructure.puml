@startuml
'https://plantuml.com/sequence-diagram

hide empty methods
hide empty fields


abstract Iterator<<반복자>> {
    VoidWatcher
    --
    Collection의 VoidOwner가 소유하고 있는 포인터를
    감시하는 VoidWatcher이다.

    VoidOwner가 소멸될 경우 제어블록을 통해 이를 감지할 수 있다.
    그래서 생성된 반복자가 유효한지 판단할 수 있게된다.
    IsValid() 함수가 이를 확인하는 함수이다.
    --
    virtual bool IsValid()
    virtual bool HasValue()
    virtual T& Previous()
    virtual T& Next()
    --
    가장 최상위 반복자 인터페이스
}



interface Iterable <<반복가능한>> {
    virtual Enumerator<T> Begin() const = 0
    virtual Enumerator<T> End() const = 0
    --
    가장 최상위 컨테이너 인터페이스
}


abstract class Collection <<컨테이너>> extends Iterable {
    VoidOwner

    해당 컨테이너 포인터의 주인을 설정한다.
    --
    Empty()
    Size()
    ToCollection()
    ToArray()
    ForEach()
    Find()

    --
    선형 컨테이너와 비선형 컨테이너의 인터페이스
}

note right of ListIterator
    그리지만 않을 뿐이지
    리스트도 배열과 마찬가지로
    
    ListQueueIterator
    ListStackIterator
    LinkedListIterator
    
    각각 구현한다.
end note

abstract class LinkedListBase extends Collection


class ListStack extends LinkedListBase
class ListQueue extends LinkedListBase 
class LinkedList extends LinkedListBase

abstract class DynamicArray extends Collection {

    --
    Resize()

}

rectangle 배열의_이터레이터 {
    class ArrayIterator {
        Watcher<ArrayState>
        ---
        Watcher는 Owner를 감시중이다.
        Owner가 사라지면 해당 이터레이터는 무효화된다.
    
        operator++()
        operator--()
    }
    
    class ArrayQueueIterator
    class ArrayStackIterator
    class VectorIterator

    circle 설명
    note top of 설명

    각 반복자들은 본체의 포인터 정보를 멤버변수로 가지고 있고
    이를 캐스팅하여 사용한다.


    end note
}

 class ListIterator {
        Watcher<ListState>
    
        operator++()
        operator--()
    }
    

class ArrayStack
class ArrayQueue
class Vector



Iterable -u-> Iterator
LinkedListBase -l-> ListIterator
ListIterator -u-|> Iterator
ArrayIterator -u-|> Iterator


VectorIterator -u-|> ArrayIterator
ArrayStackIterator -u-|> ArrayIterator
ArrayQueueIterator -u-|> ArrayIterator

Vector -r-|> DynamicArray
ArrayStack -r-|> DynamicArray
ArrayQueue -r-|> DynamicArray

ArrayStack ..> ArrayStackIterator
ArrayQueue ..> ArrayQueueIterator
Vector ..> VectorIterator

ArrayStackIterator --> ArrayStack
ArrayQueueIterator --> ArrayQueue
VectorIterator --> Vector



   

' 노드간 포지션을 잡기를 위한 연결 '
Collection -[hidden]r-> ListIterator         
Collection -[hidden]l-> ArrayIterator


@enduml