@startuml NetworkStructure

hide empty methods
hide empty fields

rectangle EndPoint_Implementation {
    interface IPEndPoint {
        GetProtocol() = 0
        ToString() = 0
    }

    class IPv4EndPoint {
        GetAddress()
        GetPort()
        ---
        Parse()
    }
    class IPv6EndPoint {
        NOT IMPLEMENTED
    }

    interface IPAddress {
        ToString() = 0
        GetProtocol() = 0
    }
    class IPv4Address {
        GetAddress()
        GetAddressOctet()
    }
    class IPv6Address {
        NOT IMPLEMENTED
    }

    IPv4EndPoint .u.|> IPEndPoint
    IPv6EndPoint .u.|> IPEndPoint

    IPv4Address .d.|> IPAddress
    IPv6Address .d.|> IPAddress

    IPv4EndPoint -d-> IPv4Address
    IPv6EndPoint -d-> IPv6Address
}

rectangle Host_Implementation {
    abstract Server {
       "서버"가 가지는 공통 인터페이스를 정의한다.
       ---
       virtual Start() = 0
       virtual Puase() = 0
       virtual Resume() = 0
       virtual Stop() = 0
    }
   

    class SessionContainer {
        서버에 접속된 Session들을 관리하는 컨테이너이다.
    }

    interface ServerEventListener {
        virtual OnStarted() = 0
        virtual OnConnected() = 0
        virtual OnDisconnected() = 0
        virtual OnPaused() = 0
        virtual OnResumed() = 0
        virtual OnSent() = 0
        virtual OnReceived() = 0
        virtual OnStopped() = 0
    }

    abstract Host {
        IOCP와 소켓을 다루는 최상위 객체
    }

    abstract Session {
    }

     class TcpServer {
        IOCP 모델의 TCP 서버이다.
    }

    class TcpSession {
        1. 서버측에서는 접속한 클라이언트를 의미한다.
        2. 클라이언트 측에서는 클라이언트의 기능 대부분을
        가진 부모 클래스를 의미한다.
    }

    class TcpClient {
    }

    class UdpClient {
    }

    class ClientEventListener {
        virtual OnConnected() = 0
        virtual OnConnectFailed() = 0
        virtual OnSent() = 0
        virtual OnReceived() = 0
        virtual OnDisconnected() = 0
    }

    TcpClient .u.|> Session
    UdpClient .u.|> Session
    TcpSession .u.|> Session

    TcpClient .d.> ClientEventListener
    UdpClient .d.> ClientEventListener

    Session -u-|> Host
    Server -u-|> Host
    TcpServer .u.|> Server
    TcpServer --> SessionContainer
    SessionContainer *--> TcpSession
    TcpServer -r-> ServerEventListener
    TcpSession .r.> ServerEventListener

    Server -[hidden]r->Session
    SessionContainer -[hidden]l->ServerEventListener
}

rectangle IOCP_Implementation {
    class IOCP {
        Create(int threadCount);
        Destroy();
        Run();
        Pause();
        Resume();
        Join();
        ---
        CreateIoCompletionPort()
        GetQueuedCompletionStatus()
        PostQueuedCompletionStatus()
    }

    class WorkerManager {
        Run()
        Pause()
        Resume()
        Join()
        ---
        워커들을 생성한 후 매니저를 반환 하는 정적함수
        static Create(int threadCount)
    }

    interface Worker {
        virtual Run() = 0
        virtual Pause() = 0
        virtual Resume() = 0
        virtual JoinWait() = 0
        virtual Join() = 0
        virtual WorkerThread(void* param) = 0
    }
    class IOCPWorker
    class IOCPPostOrder {
        Process()
        Release()
    }

    interface IOCPOverlapped {
        virtual Process() = 0
        virtual Release() { delete this; }
    }

    IOCP --> WorkerManager
    IOCPWorker .u.|> Worker
    WorkerManager *--> Worker

    IOCPWorker *-l-> IOCPOverlapped
    IOCPWorker -r-> IOCPPostOrder

    IOCPOverlappedSend .u.|> IOCPOverlapped
    IOCPOverlappedConnect .u.|> IOCPOverlapped
    IOCPOverlappedReceive .u.|> IOCPOverlapped
    IOCPOverlappedAccept .u.|> IOCPOverlapped
    IOCPOverlappedTask .u.|> IOCPOverlapped
}

rectangle Socket_Implementation {
    class Socket {
        Option()
        Handle()
        ShutdownBoth()
        ShutdownWrite()
        ShutdownRead()
        Close()
        ---
        static CreateV4()
        static CreateV6()
        static CreateTcpV4()
    }
    class Socketv4 {
        GetLocalEndPoint()
        GetRemoteEndPoint()
        ---
        Bind()
        BindAny()
        Listen()
        Accept()
        AcceptEx()
        AcceptExResult()
        Connect()
        ConnectEx()
        Send()
        SendTo()
        Receive()
        ReceiveFrom()
        SendEx()
        SendToEx()
        ReceiveEx()
        ReceiveFromEx()
    }

    class Socketv6 {
        NOT IMPLEMENTED
    }

    class SocketOption {
         SetBroadcastEnabled()
         SetSendBufferSize()
         SetRecvBufferSize()
         SetNonBlockingEnabled()
         SetNagleEnabled()
         SetLingerEnabled()
         SetReuseAddrEnabled()
         SetExclusiveReuseAddrEnabled()
         SetLingerTimeout()
         SetKeepAliveEnabled()
         SetUpdateAcceptContext()
    }

    Socketv4 -u-|> Socket
    Socketv6 -u-|> Socket
    Socket -r-> SocketOption
}


rectangle Packet_Implementation {
    interface ICommand {
        short Cmd
        short CmdLen
    }

    class Command<T>

    class RefCountObject
    class ISendPacket {
    }
    class IRecvPacket {
        패킷 수신시 캐스팅용
    }
    class StaticPacket<CommandArgs...> {
        고정 길이의 커맨드들을 처리할 때 사용하는 패킷
    }

    class DynamicPacket<CommandArgs...> {
        가변 길이의 커맨드들을 처리할 때 사용하는 패킷
    }
    class CommandBufferPacket {
        커맨드 버퍼 자체를 패킷에 담는다.
    }
    class SinglePacket<TCommand> {
        고정 또는 가변 길이 패킷을 하나만 담아서 전달 할 때 사용
    }

    Command -u-|> ICommand
    ISendPacket -u-|> RefCountObject
    StaticPacket -u-|> ISendPacket
    CommandBufferPacket -u-|> ISendPacket
    SinglePacket -u-|> ISendPacket
    DynamicPacket -u-|> ISendPacket
    SinglePacket -d-> ICommand
    DynamicPacket *-d-> ICommand
    StaticPacket *-d-> ICommand
}

Host --> IOCP

@enduml
